%header
{
#include "ast.h"

typedef struct
{
    size_t len;
    const char *str;
} auxil_t;

ast_node_t *pcc_parse_string(const char *str, size_t len);

}

%value "ast_node_t *"

%auxil "auxil_t *"

%source
{
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"

static char pcc_auxil_getchar(auxil_t *);

#define PCC_GETCHAR(auxil) pcc_auxil_getchar(auxil)

}

prog <- __ e:expr __ { $$ = e; }

exprs <- e:expr __ s:exprs { $$ = ast_expr_push(s, e); } 
        / e:expr 
        { 
            $$ = ast_create_expr(AST_EXPR_HEAD_INVOKE); 
            ast_expr_push($$, e);
        }

expr <- a:atom { $$ = a; } / '(' __ s:exprs __ ')' { $$ = ast_expr_reverse(s); }

atom <- s:sym { $$ = s; }

sym <- [a-zA-Z][a-zA-Z0-9_]* { $$ = ast_create_atom(AST_ATOM_HEAD_SYM, $0, $0e - $0s ); }

__ <- [ \t\n]*
# _ <- [ \t]*

%%

#pragma clang diagnostic pop

ast_node_t *pcc_parse_string(const char *str, size_t len)
{
    auxil_t *auxil = malloc(sizeof(pcc_auxil_t));

    auxil->str = str;
    auxil->len = len;

    pcc_context_t *ctx = pcc_create(auxil);

    ast_node_t *res = NULL;

    if(pcc_parse(ctx, &res) != 0)
    {
        fprintf(stderr, "error: end of input\n");
        exit(1);
    }

    pcc_destroy(ctx);

    return res;
}

static char pcc_auxil_getchar(auxil_t *auxil)
{
    if (auxil->len <= 0)
        return -1;

    char cc = *auxil->str;

    ++auxil->str;
    --auxil->len;

    return cc;
}
