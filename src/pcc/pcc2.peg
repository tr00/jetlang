%header
{
#include "../cst/cst.h"
}

%value "cst_node_t"

%auxil "struct CST *"

prog    <- e:expr                               { $$ = auxil->root = e; }

stmt    <- b:bind                               { $$ = s; }
         / e:expr                               { $$ = e; }

expr    <- a:atom                               { $$ = a; } 
         / c:call                               { $$ = c; }

atom    <- ( a:nil / a:int / a:sym / a:str )    { $$ = a; }


bind    <- s:sym _ '=' _ e:expr                 { 
                                                    $$ = cst_make_node(auxil, CST_TAG_BIND, $0s, $0e); 
                                                    $$ = cst_push_node(auxil, $$, s);
                                                    $$ = cst_push_node(auxil, $$, e);
                                                }

list    <- e:expr __ l:list                     {
                                                    $$ = cst_push_node(auxil, l, e);
                                                }
         / e:expr                               { 
                                                    $$ = cst_make_node(auxil, CST_TAG_CALL, $0s, $0e);
                                                    $$ = cst_push_node(auxil, $$, e); 
                                                }

call    <- '(' __ l:list __ ')'                 { $$ = cst_flip_node(l); }


nil     <- ( "()" / "nil" )                     { $$ = cst_make_node(auxil, CST_TAG_NIL, $0s, $0e); }

int     <- "0"                                  { $$ = cst_make_node(auxil, CST_TAG_INT, $0s, $0e); }

sym     <- [a-zA-Z_][a-zA-Z0-9_]+               { $$ = cst_make_node(auxil, CST_TAG_SYM, $0s, $0e); }

str     <- '\"' ( "\\\"" [^"] )* '\"'           { $$ = cst_make_node(auxil, CST_TAG_STR, $0s, $0e); }


# _   <- [ \t]*
__  <- [ \t\n]*

%%

